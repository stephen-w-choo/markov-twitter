{"version":3,"file":"static/js/77.e552fe82.chunk.js","mappings":"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","sources":["sections/StatusBox.jsx","sections/WordCloud.jsx","sections/SentimentGraph.jsx","sections/ModelDisplayArea.jsx","components/TweetSlider.jsx","components/UserForm.jsx","sections/StartScreen.jsx","sections/TweetDisplayArea.jsx","routes/MarkovApp.jsx"],"sourcesContent":["import React from \"react\";\nimport FadeIn from 'react-fade-in';\nimport { Alert, AlertIcon } from \"@chakra-ui/react\";\nimport LoadingBar from \"../components/LoadingBar\";\n\nfunction StatusBox(props) {\n  return(\n    <div className=\"loading-box\">\n      <FadeIn>\n        {props.status.loading &&\n          <LoadingBar>{props.status.message}</LoadingBar>\n        }\n        {!props.status.loading && props.status.message &&\n          <Alert\n          status='warning'\n          variant='subtle'\n          alignItems='center'\n          textAlign={'left'}\n          >\n            <AlertIcon />\n            {props.status.message}\n          </Alert>\n        }\n\n      </FadeIn>\n    </div>\n  )\n}\n\nexport default StatusBox;\n","import React from 'react'\nimport { TagCloud } from 'react-tagcloud'\n\n\nfunction WordCloudBox({wordCloud}) {\n  const options = {\n    luminosity: 'dark',\n    hue: 'green'\n  }\n\n  return (\n    <TagCloud\n      minSize={12}\n      maxSize={35}\n      tags={wordCloud}\n      colorOptions={options}\n      shuffle={false}\n    />\n  )\n}\n\nexport default WordCloudBox;\n","import {\n  AreaChart,\n  Area,\n  ResponsiveContainer\n} from 'recharts';\n\nimport {\n  Box,\n  Flex,\n  Heading,\n} from '@chakra-ui/react'\n\nfunction SentimentGraph({data}) {\n  const processDataForGraph = (data) => {\n    console.log(data)\n    const processedData = []\n    for (const [key, value] of Object.entries(data)) {\n      processedData.push({\n        sentiment: key,\n        count: value\n      })\n    }\n    //\n    return processedData\n  }\n\n  return(\n    <Box h=\"100%\" w=\"280px\" pb=\"50px\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <AreaChart\n          width={200}\n          height={60}\n          data={processDataForGraph(data)}\n          margin={{\n            top: 5,\n            right: 0,\n            left: 0,\n            bottom: 5,\n          }}\n        >\n          <defs>\n            <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\n              <stop offset=\"5%\" stopColor=\"red\"/>\n              <stop offset=\"95%\" stopColor=\"green\"/>\n            </linearGradient>\n          </defs>\n          <Area type=\"monotone\" dataKey=\"count\" stroke=\"#8884d8\" fill=\"url(#colorPv)\" />\n        </AreaChart>\n\n      </ResponsiveContainer>\n      <Flex justifyContent=\"space-between\">\n        <Heading size=\"xs\">Negative</Heading>\n        <Heading size=\"xs\">Positive</Heading>\n      </Flex>\n    </Box>\n  )\n}\n\nexport default SentimentGraph\n","import React from \"react\";\nimport CountUp from 'react-countup';\nimport {\n  Box,\n  Button,\n  Card,\n  CardHeader,\n  Divider,\n  Flex,\n  Heading,\n  Image,\n  StatGroup,\n  Stat,\n  StatLabel,\n  StatNumber,\n  StatHelpText,\n  Text,\n } from \"@chakra-ui/react\";\nimport { ArrowBackIcon, DownloadIcon } from '@chakra-ui/icons'\nimport StatusBox from \"./StatusBox\";\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport WordCloudBox from \"./WordCloud\";\nimport SentimentGraph from \"./SentimentGraph\";\n\nlibrary.add(fab)\n\nfunction ModelDisplayArea(props) {\n  // takes a response from the markovify_user api and displays the user details and background of the tweets\n  // has a button to generate tweets from the model\n\n  const twitterNumber = (number) => {\n    // takes a number and returns a string in the format \"X.XXm\" or \"X.XXk\"\n    // depending on the size of the number\n    if (number >= 1000000) {\n      return `${(number/1000000).toFixed(2)}m`\n    } else if (number >= 1000) {\n      return `${(number/1000).toFixed(2)}k`\n    } else {\n      return number\n    }\n  }\n\n  return (\n    <div className=\"model-display-area\">\n\n      <Card\n        overflow='hidden'\n        variant='outline'\n        p='3'\n        mb='3'\n      >\n        <Flex justifyContent={\"center\"} alignItems={\"center\"}>\n          <Image\n            objectFit='cover'\n            borderRadius={'md'}\n            h='120px'\n            w='120px'\n            src={props.userModel.userProfilePicture}\n          />\n          <Box w={\"100%\"} maxW=\"40ch\" pl=\"3\">\n            <Heading size='sm' m=\"5px 15px\">{props.userModel.user}</Heading>\n            <Heading size='sm' m=\"5px 15px\"color='blackAlpha.600'>\n              {`@${props.userModel.userHandle}`}\n            </Heading>\n            <Text fontSize='sm' m=\"5px 15px\">Joined {props.userModel.userJoined}</Text>\n            <StatGroup justifyContent={\"space-between\"} maxW={\"30ch\"} textAlign={\"center\"} flexWrap={\"wrap\"}>\n              <Stat colorScheme={\"twitter\"} m={1}>\n                <StatNumber fontSize=\"sm\">\n                  {twitterNumber(props.userModel.userMetrics.tweet_count)}\n                </StatNumber>\n                <StatHelpText>\n                  tweets\n                </StatHelpText>\n              </Stat>\n              <Stat colorScheme={\"twitter\"} m={1}>\n                <StatNumber fontSize=\"sm\">\n                  {twitterNumber(props.userModel.userMetrics.following_count)}\n                </StatNumber>\n                <StatHelpText>\n                  following\n                </StatHelpText>\n              </Stat>\n              <Stat colorScheme={\"twitter\"} m={1}>\n                <StatNumber fontSize=\"sm\">\n                  {twitterNumber(props.userModel.userMetrics.followers_count)}\n                </StatNumber>\n                <StatHelpText>\n                  followers\n                </StatHelpText>\n              </Stat>\n            </StatGroup>\n          </Box>\n        </Flex>\n        <Divider h={3} />\n        <CardHeader>\n          <Heading size='md' textAlign={\"center\"}>Model Details</Heading>\n        </CardHeader>\n        <StatGroup textAlign={\"center\"}>\n          <Stat>\n            <StatLabel>Trained on</StatLabel>\n            <StatNumber><CountUp end={props.userModel.modelSize.tweets} duration={1.5}/></StatNumber>\n            <StatHelpText>\n              tweets\n            </StatHelpText>\n          </Stat>\n          <Stat>\n            <StatLabel>with</StatLabel>\n            <StatNumber><CountUp end={props.userModel.modelSize.words} duration={2}/></StatNumber>\n            <StatHelpText>\n              words\n            </StatHelpText>\n          </Stat>\n          <Stat>\n            <StatLabel>\n              Tweet Dates\n            </StatLabel>\n            <StatNumber fontSize=\"sm\">\n              {props.userModel.modelDate[0]}\n            </StatNumber>\n            <StatHelpText mb={\"0\"}>\n              to\n            </StatHelpText>\n            <StatNumber fontSize=\"sm\">\n              {props.userModel.modelDate[1]}\n            </StatNumber>\n          </Stat>\n        </StatGroup>\n\n        <Card flexDir={\"row\"} justifyContent={\"space-around\"} flexWrap={\"wrap\"} variant=\"outline\">\n          <Button onClick={props.reset} colorScheme=\"teal\" m={2} minW=\"100px\">\n            <ArrowBackIcon mr=\"5px\"/> Back\n          </Button>\n          <Button onClick={props.exportToJson} colorScheme=\"teal\" m={2}>\n            <DownloadIcon mr=\"10px\"/> Save Model\n          </Button>\n        </Card>\n        <CardHeader>\n          <Heading size='md' textAlign={\"center\"}>Analytics</Heading>\n        </CardHeader>\n        <Flex justifyContent={\"space-around\"} flexWrap={\"wrap\"}>\n          <Card maxW=\"40ch\" m={2} p={3} alignItems={\"center\"} variant=\"filled\">\n            <CardHeader p={0} mb={3}>\n              <Heading size='md'> Commonly used words </Heading>\n            </CardHeader>\n            <WordCloudBox wordCloud={props.userModel.analytics.wordCloud}/>\n          </Card>\n          <Card maxW=\"40ch\" m={2} p={3} h=\"300px\" alignItems={\"center\"} variant=\"filled\" flexGrow={1}>\n            <CardHeader p={0}>\n              <Heading size='md'> Sentiment Analysis </Heading>\n            </CardHeader>\n            <SentimentGraph data={props.userModel.analytics.aggregateSentiment}/>\n          </Card>\n        </Flex>\n        <Divider h={3} />\n        </Card>\n      {\n        props.status && <StatusBox status={props.status}/>\n      }\n    </div>\n  )\n}\n\nexport default ModelDisplayArea;\n","import React from 'react'\nimport {\n  Box,\n  Slider,\n  SliderTrack,\n  SliderFilledTrack,\n  SliderThumb,\n  SliderMark,\n} from '@chakra-ui/react'\n\n\nfunction TweetSlider(props) {\n  const labelStyles = {\n    mt: '2',\n    ml: '-2.5',\n    fontSize: 'sm',\n  }\n\n  return (\n    <Box pt={6} pb={2}>\n      <Slider\n        aria-label='slider-ex-6'\n        defaultValue={props.tweetN}\n        min={0}\n        max={1600}\n        onChange={(val) => {\n          props.setTweetN(val)\n        }}\n        step={100}\n        colorScheme=\"teal\"\n      >\n\n        <SliderMark value={400} {...labelStyles}>\n          400\n        </SliderMark>\n        <SliderMark value={800} {...labelStyles}>\n          800\n        </SliderMark>\n        <SliderMark value={1200} {...labelStyles}>\n          1200\n        </SliderMark>\n        <SliderMark\n          value={props.tweetN}\n          textAlign='center'\n          bg=\"teal\"\n          color='white'\n          mt='-12'\n          ml='-60px'\n          whiteSpace={'nowrap'}\n          borderRadius='md'\n          p={1}\n        >\n          {props.tweetN} tweets\n        </SliderMark>\n        <SliderTrack>\n          <SliderFilledTrack />\n        </SliderTrack>\n        <SliderThumb />\n      </Slider>\n    </Box>\n  )\n}\n\nexport default TweetSlider\n","import React, { useState } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  Text,\n  useMediaQuery } from \"@chakra-ui/react\";\nimport { AtSignIcon } from '@chakra-ui/icons'\nimport StatusBox from \"../sections/StatusBox\";\nimport TweetSlider from \"./TweetSlider\"\n\nlibrary.add(fab)\n\nfunction UserForm(props) {\n  const defaultTweetN = 600\n\n  const [query, setQuery] = useState({\n    username: \"\"\n  })\n\n  const [tweetN, setTweetN] = useState(defaultTweetN)\n\n  const [isLargerThan600] = useMediaQuery('(min-width: 600px)') // mediaquery hook\n\n  var layout = \"column-reverse\"\n  if (isLargerThan600) {\n    layout = \"row\"\n  }\n\n  const handleChange = (event) => {\n    setQuery({\n      ...query,\n      username: event.target.value})\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    props.setStatus({\n      loading: true,\n      message: (\"Collecting tweets and generating model\"),\n      show: true,\n      error: false,\n    })\n    fetch(\n      `/markovify_user?username=${query.username}&tweetN=${tweetN}`,\n      {\n        method: 'GET', // *GET, POST, PUT, DELETE, etc.\n        mode: 'cors', // no-cors, *cors, same-origin\n      }\n    )\n    .then( (response) => {\n      return response.json()\n    })\n    .then( (response) => {\n      props.setStatus({\n        message: null,\n        loading: false,\n        show: false,\n        error: false,\n      })\n      props.setUserModel({\n        user: response.name,\n        userHandle: response.username,\n        userProfilePicture: response.userProfilePicture,\n        userMetrics: response.userMetrics,\n        userJoined: response.userJoined,\n        currentModel: response.model,\n        modelSize: response.modelSize,\n        modelDate: response.modelDate,\n        analytics: response.analytics,\n      })\n    })\n    .catch( (error) => {\n      console.log(error)\n      props.setStatus({\n        loading: false,\n        message: (`Error - user was not found. Remember to type in your user handle without the @ \\neg type BarackObama instead of @BarackObama`),\n        show: false,\n        error: true,\n      })\n    })\n  }\n\n  return (\n    <div>\n      <Flex flexDir={\"column\"}>\n        <FormControl isInvalid={props.status.error} mt={\"-20px\"} mb={\"-20px\"}>\n          <InputGroup margin={'30px auto'} maxW={'50ch'}>\n            <InputLeftElement\n              pointerEvents=\"none\"\n              children={\n                <AtSignIcon\n                  color=\"gray.800\"\n                  p={0}\n                  h={20}\n                />\n              }\n            />\n            <Input\n              type = \"text\"\n              id = \"search-input\"\n              variant=\"filled\"\n              name = \"username\"\n              placeholder = \"eg BarackObama, AlboMP\"\n              value = {query.username}\n              onChange = {handleChange}\n              pl={8}\n              fontSize={'1.2rem'}\n            />\n\n          </InputGroup>\n          <FormErrorMessage mt={-4} mb={4}>{props.status.message}</FormErrorMessage>\n        </FormControl>\n        {\n          props.status.show && <StatusBox status={props.status}/>\n        }\n        { !props.status.show &&\n          <Flex\n            w={\"100%\"}\n            justifyContent=\"space-around\"\n            alignItems=\"center\"\n            flexDir={layout}\n            mt={3}\n          >\n            <Box w={\"100%\"} maxW={\"400px\"} m={\"25px 30px 0px 10px\"}>\n              <TweetSlider tweetN={tweetN} setTweetN={setTweetN} primaryColor={props.primaryColor} />\n            </Box>\n            <Button\n              onClick={handleSubmit}\n              isLoading={props.status.loading}\n              colorScheme={'teal'}\n              isDisabled={tweetN === 0}\n              m={3}\n              maxW={\"300px\"}\n              w={\"100%\"}\n              ml={3}\n            >\n              <FontAwesomeIcon icon={['fab', 'twitter']} />\n              <Text as=\"span\" ml={2}>\n              {`Generate model`}\n              </Text>\n            </Button>\n          </Flex>\n        }\n      </Flex>\n    </div>\n  )\n}\n\nexport default UserForm;\n","import UserForm from \"../components/UserForm\";\nimport {\n  Box,\n  Card,\n  CardBody,\n  Flex,\n  Image,\n  Stack,\n  StackDivider,\n  Text\n} from \"@chakra-ui/react\";\n\nfunction StartScreen(props) {\n  return (\n    <Card p={5} pb=\"40px\" mb={3}>\n      <CardBody>\n        <Stack divider={<StackDivider />} spacing='9'>\n          <Box>\n            <Flex direction='row' spacing='3' alignItems={\"center\"} justifyContent={\"center\"} maxW={\"50ch\"} margin={\"0 auto\"}>\n              <Image src={ require('../images/icons/arrow-down.png') } alt=\"arrow-down\" h={\"20px\"} m=\"20px 15px 0px 15px\" />\n              <Text pt='2' fontSize='md'>\n                Choose a twitter user to train the model on.\n              </Text>\n            </Flex>\n            <UserForm\n              userModel = {props.userModel}\n              setUserModel={props.setUserModel}\n              resetTweets={props.resetTweets}\n              status={props.status}\n              setStatus={props.setStatus}\n              generateTweets={props.generateTweets}\n              primaryColor={props.primaryColor}\n            />\n            <Flex direction='row' spacing='3' justifyContent={\"center\"} maxW={\"50ch\"} margin={\"20px auto\"}>\n              <Image src={ require('../images/icons/arrow-up.png') } alt=\"arrow-down\" h={\"20px\"} m=\"0px 15px 0px 15px\" />\n              <Text pt='2' fontSize='md'>\n                You can adjust the number of tweets used to train the model - the more\n                tweets, the more accurate the model, but the longer it will take to generate.\n              </Text>\n            </Flex>\n          </Box>\n          <Box m={\"0 auto\"}><props.ImportJsonButton /></Box>\n        </Stack>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default StartScreen;\n","import FadeIn from 'react-fade-in';\nimport { Button, Card, Heading, Flex, Spacer } from \"@chakra-ui/react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\n\nlibrary.add(fab)\n\nfunction TweetDisplayArea(props) {\n  return (\n    <div>\n      { props.tweets.length > 0 &&\n      <Card m={\"20px auto\"} p={3} maxW={\"500px\"} justifyContent=\"center\">\n        <Heading size=\"md\" textAlign={\"center\"}>\n          Generated Tweets\n        </Heading>\n        <Button onClick={props.generateTweets} colorScheme=\"teal\" m={2} alignSelf=\"center\">\n          <FontAwesomeIcon icon={['fab', 'twitter']} /><Spacer mr=\"1\" />Generate More Tweets\n        </Button>\n        <FadeIn className=\"tweet-display-area\">\n          <Flex flexDir=\"column\" alignItems={\"center\"}>\n            {props.tweets.map( (tweet, index) => {\n              return <TweetBox userModel={props.userModel} tweet={tweet} key={index}/>\n            })}\n          </Flex>\n        </FadeIn>\n      </Card>\n    }\n    </div>\n  )\n}\n\nfunction TweetBox(props) {\n  return (\n    <div className=\"twitter-tweet\">\n      <div className=\"tweet-header\">\n        <img src={props.userModel.userProfilePicture} alt = \"\" ></img>\n        <div className=\"tweeter-name-box\">\n          <div>{props.userModel.user}</div>\n          <div className=\"tweeter-username\">{props.userModel.userHandle && `@${props.userModel.userHandle}`}</div>\n        </div>\n      </div>\n      <p>\n        {props.tweet}\n      </p>\n    </div>\n  )\n}\n\nexport default TweetDisplayArea;\n","import React, { useState } from \"react\";\nimport { Button, FormLabel, Input, } from '@chakra-ui/react'\nimport ModelDisplayArea from '../sections/ModelDisplayArea';\nimport StartScreen from '../sections/StartScreen';\nimport TweetDisplayArea from '../sections/TweetDisplayArea';\n\n\n// this entire page is a mess and I apologise - trying to learn Redux to implement a proper state management system\n\n// WILL be refactored once I'm more comfortable with Redux\n\n\n\nfunction MarkovApp(){\n  const primaryColor = \"#1DA1F2\"\n  const [status, setStatus] = useState({\n    message: null,\n    loading: false,\n    show: false,\n    error: false,\n  })\n\n  const [tweets, setTweets] = useState([])\n\n  // const [currentScreen, setCurrentScreen] = useState(\"start\")\n\n  const [userModel, setUserModel] = useState({\n    analytics: null,\n    user: null,\n    userHandle: null,\n    userProfilePicture: null,\n    userMetrics: null,\n    userJoined: null,\n    currentModel: null, // unsure - storing the markov model in the state is probably a bit much - would be better in the session storage\n    modelSize: null,\n    modelDate: null,\n  })\n\n  const reset = () => {\n    setUserModel({\n      analytics: null,\n      user: null,\n      userHandle: null,\n      userProfilePicture: null,\n      userMetrics: null,\n      userJoined: null,\n      currentModel: null,\n      modelSize: null,\n      modelDate: null,\n    })\n    setTweets([])\n    setStatus({\n      message: null,\n      loading: false,\n      show: false,\n      error: false,\n    })\n  }\n\n\n  const [tweetKey, setTweetKey] = useState(0)\n\n  React.useEffect(() => { // generates tweets when the model is loaded or changed\n    if (userModel.currentModel) { // this is because the new functional setstate doesn't update the state immediately\n      generateTweets() // and doesn't allow for callbacks immediately after the state is set\n    }                   // there's probably a better way to do this\n  }, [userModel.currentModel])\n\n  React.useEffect(() => { // sets a key to the tweets to force remounting of the tweet display area\n    setTweetKey(tweetKey + 1) // this is a bit of a hacky way to force the tweet display area to remount and trigger the fadein animation\n  }, [tweets])\n\n  const generateTweets = (event) => {\n    setStatus({\n      loading: true,\n      message: \"Generating tweets...\",\n      show: true,\n      error: false\n    })\n    fetch(\"/generate_tweets\", {\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.,\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n          model: userModel.currentModel\n        })\n      // body: JSON.stringify([\"test\"])\n    })\n    .then(response => {\n      return response.json()\n    })\n    .then( (response) => {\n      setStatus({\n        message: null,\n        loading: false,\n        show: false,\n        error: false,\n      })\n      setTweets(response.tweets)\n    })\n    .catch( (error) => {\n      setTweets([])\n      setStatus({\n        message: \"Error generating tweets\",\n        loading: false,\n        show: false,\n        error: true\n      })\n    })\n  }\n\n  const resetTweets = () => setTweets([])\n\n  const downloadFile = ({ data, fileName, fileType }) => {\n    // Create a blob with the data we want to download as a file\n    const blob = new Blob([data], { type: fileType })\n    // Create an anchor element and dispatch a click event on it\n    // to trigger a download\n    const a = document.createElement('a')\n    a.download = fileName\n    a.href = window.URL.createObjectURL(blob)\n    const clickEvt = new MouseEvent('click', {\n      view: window,\n      bubbles: true,\n      cancelable: true,\n    })\n    a.dispatchEvent(clickEvt)\n    a.remove()\n  }\n\n  const exportToJson = e => {\n    e.preventDefault()\n    downloadFile({\n      data: JSON.stringify(userModel),\n      fileName: `${userModel.userHandle}_model.json`,\n      fileType: 'text/json',\n    })\n  }\n\n  const importJson = e => {\n    e.preventDefault()\n    const file = e.target.files[0]\n    const reader = new FileReader()\n    reader.onload = e => {\n      const json = JSON.parse(e.target.result)\n      setUserModel(json)\n    }\n    reader.readAsText(file)\n  }\n\n  const ImportJsonButton = () => {\n    return (\n      <div>\n        <Button colorScheme={\"teal\"}>\n        <FormLabel\n          htmlFor=\"import-json\"\n          className=\"import-button\"\n          h=\"100%\"\n          w=\"100%\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          m=\"0\"\n          _hover={{ cursor: \"pointer\" }}\n        >\n            Upload a previous model (.json)\n          <Input\n          colorScheme={\"teal\"}\n          type=\"file\"\n          id=\"import-json\"\n          accept=\".json\"\n          onChange={importJson}\n          h=\"100%\"\n          w=\"100%\"\n          display=\"none\"\n        />\n        </FormLabel>\n        </Button>\n\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      { !userModel.user && // show the start screen if there is no user\n        <StartScreen\n          userModel = {userModel}\n          setUserModel={setUserModel}\n          resetTweets={resetTweets}\n          generateTweets={generateTweets}\n          status={status}\n          setStatus={setStatus}\n          primaryColor={primaryColor}\n          ImportJsonButton={ImportJsonButton}\n        />\n      }\n      { userModel.user &&\n        <ModelDisplayArea\n          userModel={userModel}\n          setTweets={setTweets}\n          generateTweets={generateTweets}\n          reset={reset}\n          status={status}\n          exportToJson={exportToJson}\n        />\n      }\n      <TweetDisplayArea key={tweetKey} tweets={tweets} userModel={userModel} generateTweets={generateTweets}/>\n    </div>\n  );\n}\n\nexport default MarkovApp;\n"],"names":["props","className","status","loading","LoadingBar","message","variant","alignItems","textAlign","wordCloud","minSize","maxSize","tags","colorOptions","luminosity","hue","shuffle","data","h","w","pb","ResponsiveContainer","width","height","AreaChart","console","log","processedData","Object","entries","key","value","push","sentiment","count","processDataForGraph","margin","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","Area","type","dataKey","stroke","fill","justifyContent","size","library","fab","twitterNumber","number","toFixed","overflow","p","mb","objectFit","borderRadius","src","userModel","userProfilePicture","maxW","pl","m","user","color","userHandle","fontSize","userJoined","flexWrap","colorScheme","userMetrics","tweet_count","following_count","followers_count","end","modelSize","tweets","duration","words","modelDate","flexDir","onClick","reset","minW","mr","exportToJson","WordCloud","analytics","flexGrow","aggregateSentiment","labelStyles","mt","ml","pt","defaultValue","tweetN","min","max","onChange","val","setTweetN","step","bg","whiteSpace","useState","username","query","setQuery","useMediaQuery","layout","isInvalid","error","pointerEvents","children","I","name","placeholder","event","target","show","primaryColor","preventDefault","setStatus","fetch","method","mode","then","response","json","setUserModel","currentModel","model","catch","isLoading","isDisabled","icon","as","divider","spacing","direction","require","alt","resetTweets","generateTweets","ImportJsonButton","TweetBox","tweet","length","alignSelf","map","index","setTweets","tweetKey","setTweetKey","React","headers","body","JSON","stringify","importJson","e","file","files","reader","FileReader","onload","parse","result","readAsText","htmlFor","display","_hover","cursor","accept","fileName","fileType","blob","Blob","a","document","createElement","download","href","window","URL","createObjectURL","clickEvt","MouseEvent","view","bubbles","cancelable","dispatchEvent","remove","downloadFile"],"sourceRoot":""}