{"version":3,"file":"static/js/561.45d19aa0.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","mockData/utils/parseModel.ts","mockData/utils/generateSentences.ts","routes/DemoApp.jsx","sections/WordCloud.jsx","sections/SentimentGraph.jsx","sections/ModelDisplayArea.jsx","sections/StatusBox.jsx","sections/TweetDisplayArea.jsx"],"sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}","type FreqList = { [key: string]: number }\n\nexport type State = [string, string]\n\ntype DeserialisedState = string\n\ntype Chain = [State, FreqList]\n\nexport type AdjList = { [key: DeserialisedState]: [string, number][] }\n\nexport function serialiseState(state: State) {\n    return state.join('|||') as DeserialisedState\n}\n\nexport function deserialiseState(state: string) {\n    return state.split('|||') as State\n}\n\nfunction buildAdjList(\n    model: Chain[],\n) {\n    const res: AdjList = {}\n    \n    for (let chain of model) {\n        const [state, freqList] = chain\n        const serialisedState = serialiseState(state)\n        res[serialisedState] = []\n        for (const [nextState, freq] of Object.entries(freqList)) {\n            res[serialisedState].push([nextState, freq])\n        }\n    }\n\n    return res\n}\n\n\n// let obamaResponse = JSON.parse(readFileSync('BarackObamaOriginalModel.json', 'utf8'))\n// let obamaModel = JSON.parse(obamaResponse.currentModel)\n// let obamaChains = JSON.parse(obamaModel.chain) as Chain[]\n// let obamaAdjList = buildAdjList(obamaChains)\n\n// writeFileSync('obamaAdjList.json', JSON.stringify(obamaAdjList))","import { AdjList, State, deserialiseState, serialiseState } from \"./parseModel.ts\"\n\nexport function buildSentence(\n    adjList: AdjList,\n) {\n    /* \n    Client side version of the tweet generator that was previously running \n    on the Flask server\n    */\n\n    let sentence: string[] = []\n\n    let currentState = [\"___BEGIN__\",\"___BEGIN__\"] as State\n\n    while (currentState[1] !== \"___END__\") {\n        const serialisedState = serialiseState(currentState)\n        const nextStates = adjList[serialisedState]\n        const totalFreq = nextStates.reduce((acc, [_, freq]) => acc + freq, 0)\n        const rand = Math.random() * totalFreq\n        let runningTotal = 0\n        for (const [nextState, freq] of nextStates) {\n            runningTotal += freq\n            if (runningTotal >= rand) {\n                sentence.push(nextState)\n                currentState = [currentState[1], nextState]\n                break\n            }\n        }\n    }\n\n    return sentence.slice(0, -1).join(\" \")\n}\n","import React, { useState } from \"react\";\nimport ModelDisplayArea from '../sections/ModelDisplayArea';\nimport TweetDisplayArea from '../sections/TweetDisplayArea';\nimport { useNavigate } from 'react-router-dom'\nimport { buildSentence } from \"../mockData/utils/generateSentences.ts\";\n\n\nfunction DemoApp({demoModel}){\n  const navigate = useNavigate()\n  \n  const [tweets, setTweets] = useState([])\n  \n  const [status, setStatus] = useState({\n    message: null,\n    loading: false,\n    show: false,\n    error: false,\n  })\n\n  const userModel = demoModel\n\n  const [tweetKey, setTweetKey] = useState(0)\n\n  React.useEffect(() => { // sets a key to the tweets to force remounting of the tweet display area\n    setTweetKey(tweetKey + 1) // this is a bit of a hacky way to force the tweet display area to remount and trigger the fadein animation\n  }, [tweets])\n\n  React.useEffect(() => { // generates tweets when the page is loaded\n    if (userModel.currentModel) { \n      generateTweets() \n    }         \n  }, [])\n\n  const generateTweetList = async () => {\n    let res = []\n    for (let i = 0; i < 5; i++) {\n      res.push(buildSentence(userModel.currentModel))\n    }\n\n    return res\n  }\n\n  const generateTweets = (event) => {\n    setStatus({\n      loading: true,\n      message: \"Generating tweets...\",\n      show: true,\n      error: false\n    })\n    generateTweetList()\n      .then( (response) => {\n        setStatus({\n          message: null,\n          loading: false,\n          show: false,\n          error: false,\n        })\n        setTweets(response)\n      })\n    .catch( (error) => {\n      setTweets([])\n      setStatus({\n        message: \"Error generating tweets\",\n        loading: false,\n        show: false,\n        error: true\n      })\n    })\n  }\n\n  const downloadFile = ({ data, fileName, fileType }) => {\n    const blob = new Blob([data], { type: fileType })\n    const a = document.createElement('a')\n    a.download = fileName\n    a.href = window.URL.createObjectURL(blob)\n    const clickEvt = new MouseEvent('click', {\n      view: window,\n      bubbles: true,\n      cancelable: true,\n    })\n    a.dispatchEvent(clickEvt)\n    a.remove()\n  }\n\n  const exportToJson = e => {\n    e.preventDefault()\n    downloadFile({\n      data: JSON.stringify(userModel),\n      fileName: `${userModel.userHandle}_model.json`,\n      fileType: 'text/json',\n    })\n  }\n\n  return (\n    <div>\n      { userModel.user &&\n        <ModelDisplayArea\n          userModel={userModel}\n          setTweets={setTweets}\n          generateTweets={generateTweets}\n          reset={ () => {\n            navigate('/')\n          }}\n          status={status}\n          exportToJson={exportToJson}\n        />\n      }\n      <TweetDisplayArea \n        key={tweetKey} \n        tweets={tweets} \n        userModel={userModel} \n        generateTweets={generateTweets}\n      />\n    </div>\n  );\n}\n\nexport default DemoApp;\n","import React from 'react'\nimport { TagCloud } from 'react-tagcloud'\n\n\nfunction WordCloudBox({wordCloud}) {\n  const options = {\n    luminosity: 'dark',\n    hue: 'green'\n  }\n\n  return (\n    <TagCloud\n      minSize={12}\n      maxSize={35}\n      tags={wordCloud}\n      colorOptions={options}\n      shuffle={false}\n    />\n  )\n}\n\nexport default WordCloudBox;\n","import {\n  AreaChart,\n  Area,\n  ResponsiveContainer\n} from 'recharts';\n\nimport {\n  Box,\n  Flex,\n  Heading,\n} from '@chakra-ui/react'\n\nfunction SentimentGraph({data}) {\n  const processDataForGraph = (data) => {\n    console.log(data)\n    const processedData = []\n    for (const [key, value] of Object.entries(data)) {\n      processedData.push({\n        sentiment: key,\n        count: value\n      })\n    }\n    //\n    return processedData\n  }\n\n  return(\n    <Box h=\"100%\" w=\"280px\" pb=\"50px\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <AreaChart\n          width={200}\n          height={60}\n          data={processDataForGraph(data)}\n          margin={{\n            top: 5,\n            right: 0,\n            left: 0,\n            bottom: 5,\n          }}\n        >\n          <defs>\n            <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\n              <stop offset=\"5%\" stopColor=\"red\"/>\n              <stop offset=\"95%\" stopColor=\"green\"/>\n            </linearGradient>\n          </defs>\n          <Area type=\"monotone\" dataKey=\"count\" stroke=\"#8884d8\" fill=\"url(#colorPv)\" />\n        </AreaChart>\n\n      </ResponsiveContainer>\n      <Flex justifyContent=\"space-between\">\n        <Heading size=\"xs\">Negative</Heading>\n        <Heading size=\"xs\">Positive</Heading>\n      </Flex>\n    </Box>\n  )\n}\n\nexport default SentimentGraph\n","import React from \"react\";\nimport CountUp from 'react-countup';\nimport {\n  Box,\n  Button,\n  Card,\n  CardHeader,\n  Divider,\n  Flex,\n  Heading,\n  Image,\n  StatGroup,\n  Stat,\n  StatLabel,\n  StatNumber,\n  StatHelpText,\n  Text,\n } from \"@chakra-ui/react\";\nimport { ArrowBackIcon, DownloadIcon } from '@chakra-ui/icons'\nimport StatusBox from \"./StatusBox\";\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport WordCloudBox from \"./WordCloud\";\nimport SentimentGraph from \"./SentimentGraph\";\n\nlibrary.add(fab)\n\nfunction ModelDisplayArea(props) {\n  // takes a response from the markovify_user api and displays the user details and background of the tweets\n  // has a button to generate tweets from the model\n\n  const twitterNumber = (number) => {\n    // takes a number and returns a string in the format \"X.XXm\" or \"X.XXk\"\n    // depending on the size of the number\n    if (number >= 1000000) {\n      return `${(number/1000000).toFixed(2)}m`\n    } else if (number >= 1000) {\n      return `${(number/1000).toFixed(2)}k`\n    } else {\n      return number\n    }\n  }\n\n  return (\n    <div className=\"model-display-area\">\n\n      <Card\n        overflow='hidden'\n        variant='outline'\n        p='3'\n        mb='3'\n      >\n        <Flex justifyContent={\"center\"} alignItems={\"center\"}>\n          <Image\n            objectFit='cover'\n            borderRadius={'md'}\n            h='120px'\n            w='120px'\n            src={props.userModel.userProfilePicture}\n          />\n          <Box w={\"100%\"} maxW=\"40ch\" pl=\"3\">\n            <Heading size='sm' m=\"5px 15px\">{props.userModel.user}</Heading>\n            <Heading size='sm' m=\"5px 15px\"color='blackAlpha.600'>\n              {`@${props.userModel.userHandle}`}\n            </Heading>\n            <Text fontSize='sm' m=\"5px 15px\">Joined {props.userModel.userJoined}</Text>\n            <StatGroup justifyContent={\"space-between\"} maxW={\"30ch\"} textAlign={\"center\"} flexWrap={\"wrap\"}>\n              <Stat colorScheme={\"twitter\"} m={1}>\n                <StatNumber fontSize=\"sm\">\n                  {twitterNumber(props.userModel.userMetrics.tweet_count)}\n                </StatNumber>\n                <StatHelpText>\n                  tweets\n                </StatHelpText>\n              </Stat>\n              <Stat colorScheme={\"twitter\"} m={1}>\n                <StatNumber fontSize=\"sm\">\n                  {twitterNumber(props.userModel.userMetrics.following_count)}\n                </StatNumber>\n                <StatHelpText>\n                  following\n                </StatHelpText>\n              </Stat>\n              <Stat colorScheme={\"twitter\"} m={1}>\n                <StatNumber fontSize=\"sm\">\n                  {twitterNumber(props.userModel.userMetrics.followers_count)}\n                </StatNumber>\n                <StatHelpText>\n                  followers\n                </StatHelpText>\n              </Stat>\n            </StatGroup>\n          </Box>\n        </Flex>\n        <Divider h={3} />\n        <CardHeader>\n          <Heading size='md' textAlign={\"center\"}>Model Details</Heading>\n        </CardHeader>\n        <StatGroup textAlign={\"center\"}>\n          <Stat>\n            <StatLabel>Trained on</StatLabel>\n            <StatNumber><CountUp end={props.userModel.modelSize.tweets} duration={1.5}/></StatNumber>\n            <StatHelpText>\n              tweets\n            </StatHelpText>\n          </Stat>\n          <Stat>\n            <StatLabel>with</StatLabel>\n            <StatNumber><CountUp end={props.userModel.modelSize.words} duration={2}/></StatNumber>\n            <StatHelpText>\n              words\n            </StatHelpText>\n          </Stat>\n          <Stat>\n            <StatLabel>\n              Tweet Dates\n            </StatLabel>\n            <StatNumber fontSize=\"sm\">\n              {props.userModel.modelDate[0]}\n            </StatNumber>\n            <StatHelpText mb={\"0\"}>\n              to\n            </StatHelpText>\n            <StatNumber fontSize=\"sm\">\n              {props.userModel.modelDate[1]}\n            </StatNumber>\n          </Stat>\n        </StatGroup>\n\n        <Card flexDir={\"row\"} justifyContent={\"space-around\"} flexWrap={\"wrap\"} variant=\"outline\">\n          <Button onClick={props.reset} colorScheme=\"teal\" m={2} minW=\"100px\">\n            <ArrowBackIcon mr=\"5px\"/> Back\n          </Button>\n          <Button onClick={props.exportToJson} colorScheme=\"teal\" m={2}>\n            <DownloadIcon mr=\"10px\"/> Save Model\n          </Button>\n        </Card>\n        <CardHeader>\n          <Heading size='md' textAlign={\"center\"}>Analytics</Heading>\n        </CardHeader>\n        <Flex justifyContent={\"space-around\"} flexWrap={\"wrap\"}>\n          <Card maxW=\"40ch\" m={2} p={3} alignItems={\"center\"} variant=\"filled\">\n            <CardHeader p={0} mb={3}>\n              <Heading size='md'> Commonly used words </Heading>\n            </CardHeader>\n            <WordCloudBox wordCloud={props.userModel.analytics.wordCloud}/>\n          </Card>\n          <Card maxW=\"40ch\" m={2} p={3} h=\"300px\" alignItems={\"center\"} variant=\"filled\" flexGrow={1}>\n            <CardHeader p={0}>\n              <Heading size='md'> Sentiment Analysis </Heading>\n            </CardHeader>\n            <SentimentGraph data={props.userModel.analytics.aggregateSentiment}/>\n          </Card>\n        </Flex>\n        <Divider h={3} />\n        </Card>\n      {\n        props.status && <StatusBox status={props.status}/>\n      }\n    </div>\n  )\n}\n\nexport default ModelDisplayArea;\n","import React from \"react\";\nimport FadeIn from 'react-fade-in';\nimport { Alert, AlertIcon } from \"@chakra-ui/react\";\nimport LoadingBar from \"../components/LoadingBar\";\n\nfunction StatusBox(props) {\n  return(\n    <div className=\"loading-box\">\n      <FadeIn>\n        {props.status.loading &&\n          <LoadingBar>{props.status.message}</LoadingBar>\n        }\n        {!props.status.loading && props.status.message &&\n          <Alert\n          status='warning'\n          variant='subtle'\n          alignItems='center'\n          textAlign={'left'}\n          >\n            <AlertIcon />\n            {props.status.message}\n          </Alert>\n        }\n\n      </FadeIn>\n    </div>\n  )\n}\n\nexport default StatusBox;\n","import FadeIn from 'react-fade-in';\nimport { Button, Card, Heading, Flex, Spacer } from \"@chakra-ui/react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\n\nlibrary.add(fab)\n\nfunction TweetDisplayArea(props) {\n  console.log(\"tweets loaded\")\n  return (\n    <div>\n      { props.tweets.length > 0 &&\n      <Card m={\"20px auto\"} p={3} maxW={\"500px\"} justifyContent=\"center\">\n        <Heading size=\"md\" textAlign={\"center\"}>\n          Generated Tweets\n        </Heading>\n        <Button onClick={props.generateTweets} colorScheme=\"teal\" m={2} alignSelf=\"center\">\n          <FontAwesomeIcon icon={['fab', 'twitter']} /><Spacer mr=\"1\" />Generate More Tweets\n        </Button>\n        <FadeIn className=\"tweet-display-area\">\n          <Flex flexDir=\"column\" alignItems={\"center\"}>\n            {props.tweets.map( (tweet, index) => {\n              return <TweetBox userModel={props.userModel} tweet={tweet} key={index}/>\n            })}\n          </Flex>\n        </FadeIn>\n      </Card>\n    }\n    </div>\n  )\n}\n\nfunction TweetBox(props) {\n  return (\n    <div className=\"twitter-tweet\">\n      <div className=\"tweet-header\">\n        <img src={props.userModel.userProfilePicture} alt = \"\" ></img>\n        <div className=\"tweeter-name-box\">\n          <div>{props.userModel.user}</div>\n          <div className=\"tweeter-username\">{props.userModel.userHandle && `@${props.userModel.userHandle}`}</div>\n        </div>\n      </div>\n      <p>\n        {props.tweet}\n      </p>\n    </div>\n  )\n}\n\nexport default TweetDisplayArea;\n"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","serialiseState","state","join","buildSentence","adjList","sentence","currentState","nextStates","totalFreq","reduce","acc","rand","Math","random","runningTotal","nextState","push","slice","demoModel","navigate","useNavigate","useState","tweets","setTweets","message","loading","show","status","setStatus","userModel","tweetKey","setTweetKey","React","currentModel","generateTweets","generateTweetList","fn","res","i","self","this","args","arguments","apply","err","undefined","event","response","catch","user","ModelDisplayArea","reset","exportToJson","e","preventDefault","data","fileName","fileType","blob","Blob","type","a","document","createElement","download","href","window","URL","createObjectURL","clickEvt","MouseEvent","view","bubbles","cancelable","dispatchEvent","remove","downloadFile","JSON","stringify","userHandle","TweetDisplayArea","wordCloud","minSize","maxSize","tags","colorOptions","luminosity","hue","shuffle","h","w","pb","ResponsiveContainer","width","height","AreaChart","console","log","processedData","Object","entries","sentiment","count","processDataForGraph","margin","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","Area","dataKey","stroke","fill","justifyContent","size","library","fab","props","twitterNumber","number","toFixed","className","overflow","variant","p","mb","alignItems","objectFit","borderRadius","src","userProfilePicture","maxW","pl","m","color","fontSize","userJoined","textAlign","flexWrap","colorScheme","userMetrics","tweet_count","following_count","followers_count","end","modelSize","duration","words","modelDate","flexDir","onClick","minW","mr","WordCloud","analytics","flexGrow","aggregateSentiment","StatusBox","TweetBox","alt","tweet","length","alignSelf","icon","map","index"],"sourceRoot":""}