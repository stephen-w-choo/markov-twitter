{"version":3,"file":"static/js/156.1dfbdc81.chunk.js","mappings":"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","sources":["components/StatusBox.jsx","sections/WordCloud.js","sections/SentimentGraph.js","sections/ModelDisplayArea.js","components/TweetSlider.jsx","components/UserForm.jsx","sections/StartScreen.jsx","sections/TweetDisplayArea.js","routes/MarkovApp.jsx"],"sourcesContent":["import React from \"react\";\nimport FadeIn from 'react-fade-in';\nimport { GridLoader } from 'react-spinners';\nimport { Alert, AlertIcon, Box, Flex, Spinner, Text } from \"@chakra-ui/react\";\n\nfunction StatusBox(props) {\n  return(\n    <div className=\"loading-box\">\n      <FadeIn>\n        {props.status.loading &&\n          <Alert\n          status='info'\n          variant='subtle'\n          alignItems='center'\n          textAlign={'left'}\n          justifyContent={'space-around'}\n          flexWrap={'wrap'}\n          p={4}\n          >\n            <Spinner\n              as=\"span\"\n              thickness='4px'\n              speed='0.65s'\n              emptyColor='gray.200'\n              color='blue.500'\n              size='lg'\n              m={4}\n              flexShrink={0}\n            />\n            <Box flexGrow=\"1\">{props.status.message}</Box>\n          </Alert>\n        }\n        {!props.status.loading && props.status.message &&\n          <Alert\n          status='warning'\n          variant='subtle'\n          alignItems='center'\n          textAlign={'left'}\n          >\n            <AlertIcon />\n            {props.status.message}\n          </Alert>\n        }\n\n      </FadeIn>\n    </div>\n  )\n}\n\nexport default StatusBox;\n","import React from 'react'\nimport { TagCloud } from 'react-tagcloud'\nimport WordCloud from 'react-d3-cloud';\nimport { scaleOrdinal } from 'd3-scale';\nimport { schemeCategory10 } from 'd3-scale-chromatic';\nimport FadeIn from 'react-fade-in/lib/FadeIn';\n\n\nfunction WordCloudBox({wordCloud}) {\n  const options = {\n    luminosity: 'dark',\n    hue: 'green'\n  }\n\n  // const schemeCategory10ScaleOrdinal = scaleOrdinal(schemeCategory10)\n\n  return (\n    <TagCloud\n      minSize={12}\n      maxSize={35}\n      tags={wordCloud}\n      colorOptions={options}\n      shuffle={false}\n    />\n    // <WordCloud\n    // data={wordCloud}\n    // width={200}\n    // height={200}\n    // font=\"Times\"\n    // fontStyle=\"italic\"\n    // fontWeight=\"bold\"\n    // fontSize={(word) => Math.log2(word.value) * 3}\n    // spiral=\"rectangular\"\n    // rotate={(word) => word.value % 360}\n    // padding={2}\n    // random={Math.random}\n    // fill={(d, i) => schemeCategory10ScaleOrdinal(i)}\n  // />\n  )\n}\n\nexport default WordCloudBox;\n","import {\n  AreaChart,\n  Area,\n  ResponsiveContainer\n} from 'recharts';\n\nimport {\n  Box,\n  Flex,\n  Heading,\n} from '@chakra-ui/react'\n\nfunction SentimentGraph({data}) {\n  const processDataForGraph = (data) => {\n    console.log(data)\n    const processedData = []\n    for (const [key, value] of Object.entries(data)) {\n      processedData.push({\n        sentiment: key,\n        count: value\n      })\n    }\n    //\n    return processedData\n  }\n\n  return(\n    <Box h=\"100%\" w=\"280px\" pb=\"50px\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <AreaChart\n          width={200}\n          height={60}\n          data={processDataForGraph(data)}\n          margin={{\n            top: 5,\n            right: 0,\n            left: 0,\n            bottom: 5,\n          }}\n        >\n          <defs>\n            <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\n              <stop offset=\"5%\" stopColor=\"red\"/>\n              <stop offset=\"95%\" stopColor=\"green\"/>\n            </linearGradient>\n          </defs>\n          <Area type=\"monotone\" dataKey=\"count\" stroke=\"#8884d8\" fill=\"url(#colorPv)\" />\n        </AreaChart>\n\n      </ResponsiveContainer>\n      <Flex justifyContent=\"space-between\">\n        <Heading size=\"xs\">Negative</Heading>\n        <Heading size=\"xs\">Positive</Heading>\n      </Flex>\n    </Box>\n  )\n}\n\nexport default SentimentGraph\n","import React from \"react\";\nimport CountUp from 'react-countup';\nimport {\n  Box,\n  Button,\n  Card,\n  CardHeader,\n  Divider,\n  Flex,\n  Heading,\n  Image,\n  StatGroup,\n  Stat,\n  StatLabel,\n  StatNumber,\n  StatHelpText,\n  Text,\n } from \"@chakra-ui/react\";\nimport { ArrowBackIcon, DownloadIcon } from '@chakra-ui/icons'\nimport StatusBox from \"../components/StatusBox\";\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport WordCloudBox from \"./WordCloud\";\nimport SentimentGraph from \"./SentimentGraph\";\n\nlibrary.add(fab)\n\nfunction ModelDisplayArea(props) {\n  // takes a response from the markovify_user api and displays the user details and background of the tweets\n  // has a button to generate tweets from the model\n\n  const twitterNumber = (number) => {\n    // takes a number and returns a string in the format \"X.XXm\" or \"X.XXk\"\n    // depending on the size of the number\n    if (number >= 1000000) {\n      return `${(number/1000000).toFixed(2)}m`\n    } else if (number >= 1000) {\n      return `${(number/1000).toFixed(2)}k`\n    } else {\n      return number\n    }\n  }\n\n  return (\n    <div className=\"model-display-area\">\n\n      <Card\n        overflow='hidden'\n        variant='outline'\n        p='3'\n        mb='3'\n      >\n        <Flex justifyContent={\"center\"} alignItems={\"center\"}>\n          <Image\n            objectFit='cover'\n            borderRadius={'md'}\n            h='120px'\n            w='120px'\n            src={props.userModel.userProfilePicture}\n          />\n          <Box w={\"100%\"} maxW=\"40ch\" pl=\"3\">\n            <Heading size='sm' m=\"5px 15px\">{props.userModel.user}</Heading>\n            <Heading size='sm' m=\"5px 15px\"color='blackAlpha.600'>\n              {`@${props.userModel.userHandle}`}\n            </Heading>\n            <Text fontSize='sm' m=\"5px 15px\">Joined {props.userModel.userJoined}</Text>\n            <StatGroup justifyContent={\"space-between\"} maxW={\"30ch\"} textAlign={\"center\"} flexWrap={\"wrap\"}>\n              <Stat colorScheme={\"twitter\"} m={1}>\n                <StatNumber fontSize=\"sm\">\n                  {twitterNumber(props.userModel.userMetrics.tweet_count)}\n                </StatNumber>\n                <StatHelpText>\n                  tweets\n                </StatHelpText>\n              </Stat>\n              <Stat colorScheme={\"twitter\"} m={1}>\n                <StatNumber fontSize=\"sm\">\n                  {twitterNumber(props.userModel.userMetrics.following_count)}\n                </StatNumber>\n                <StatHelpText>\n                  following\n                </StatHelpText>\n              </Stat>\n              <Stat colorScheme={\"twitter\"} m={1}>\n                <StatNumber fontSize=\"sm\">\n                  {twitterNumber(props.userModel.userMetrics.followers_count)}\n                </StatNumber>\n                <StatHelpText>\n                  followers\n                </StatHelpText>\n              </Stat>\n            </StatGroup>\n          </Box>\n        </Flex>\n        <Divider h={3} />\n        <CardHeader>\n          <Heading size='md' textAlign={\"center\"}>Model Details</Heading>\n        </CardHeader>\n        <StatGroup textAlign={\"center\"}>\n          <Stat>\n            <StatLabel>Trained on</StatLabel>\n            <StatNumber><CountUp end={props.userModel.modelSize.tweets} duration={1.5}/></StatNumber>\n            <StatHelpText>\n              tweets\n            </StatHelpText>\n          </Stat>\n          <Stat>\n            <StatLabel>with</StatLabel>\n            <StatNumber><CountUp end={props.userModel.modelSize.words} duration={2}/></StatNumber>\n            <StatHelpText>\n              words\n            </StatHelpText>\n          </Stat>\n          <Stat>\n            <StatLabel>\n              Tweet Dates\n            </StatLabel>\n            <StatNumber fontSize=\"sm\">\n              {props.userModel.modelDate[0]}\n            </StatNumber>\n            <StatHelpText mb={\"0\"}>\n              to\n            </StatHelpText>\n            <StatNumber fontSize=\"sm\">\n              {props.userModel.modelDate[1]}\n            </StatNumber>\n          </Stat>\n        </StatGroup>\n\n        <Card flexDir={\"row\"} justifyContent={\"space-around\"} flexWrap={\"wrap\"} variant=\"outline\">\n          <Button onClick={props.reset} colorScheme=\"teal\" m={2} minW=\"100px\">\n            <ArrowBackIcon mr=\"5px\"/> Back\n          </Button>\n          <Button onClick={props.exportToJson} colorScheme=\"teal\" m={2}>\n            <DownloadIcon mr=\"10px\"/> Save Model\n          </Button>\n        </Card>\n        <CardHeader>\n          <Heading size='md' textAlign={\"center\"}>Analytics</Heading>\n        </CardHeader>\n        <Flex justifyContent={\"space-around\"} flexWrap={\"wrap\"}>\n          <Card maxW=\"40ch\" m={2} p={3} alignItems={\"center\"} variant=\"filled\">\n            <CardHeader p={0} mb={3}>\n              <Heading size='md'> Commonly used words </Heading>\n            </CardHeader>\n            <WordCloudBox wordCloud={props.userModel.analytics.wordCloud}/>\n          </Card>\n          <Card maxW=\"40ch\" m={2} p={3} h=\"300px\" alignItems={\"center\"} variant=\"filled\" flexGrow={1}>\n            <CardHeader p={0}>\n              <Heading size='md'> Sentiment Analysis </Heading>\n            </CardHeader>\n            <SentimentGraph data={props.userModel.analytics.aggregateSentiment}/>\n          </Card>\n        </Flex>\n        <Divider h={3} />\n        </Card>\n      {\n        props.status && <StatusBox status={props.status}/>\n      }\n    </div>\n  )\n}\n\nexport default ModelDisplayArea;\n","import React from 'react'\nimport {\n  Box,\n  Slider,\n  SliderTrack,\n  SliderFilledTrack,\n  SliderThumb,\n  SliderMark,\n} from '@chakra-ui/react'\n\n\nfunction TweetSlider(props) {\n  const labelStyles = {\n    mt: '2',\n    ml: '-2.5',\n    fontSize: 'sm',\n  }\n\n  return (\n    <Box pt={6} pb={2}>\n      <Slider\n        aria-label='slider-ex-6'\n        defaultValue={props.tweetN}\n        min={0}\n        max={1600}\n        onChange={(val) => {\n          props.setTweetN(val)\n        }}\n        step={100}\n        colorScheme=\"teal\"\n      >\n\n        <SliderMark value={400} {...labelStyles}>\n          400\n        </SliderMark>\n        <SliderMark value={800} {...labelStyles}>\n          800\n        </SliderMark>\n        <SliderMark value={1200} {...labelStyles}>\n          1200\n        </SliderMark>\n        <SliderMark\n          value={props.tweetN}\n          textAlign='center'\n          bg=\"teal\"\n          color='white'\n          mt='-12'\n          ml='-60px'\n          whiteSpace={'nowrap'}\n          borderRadius='md'\n          p={1}\n        >\n          {props.tweetN} tweets\n        </SliderMark>\n        <SliderTrack>\n          <SliderFilledTrack />\n        </SliderTrack>\n        <SliderThumb />\n      </Slider>\n    </Box>\n  )\n}\n\nexport default TweetSlider\n","import React, { useState } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  Text,\n  useMediaQuery } from \"@chakra-ui/react\";\nimport { AtSignIcon } from '@chakra-ui/icons'\nimport StatusBox from \"./StatusBox\";\nimport TweetSlider from \"./TweetSlider\"\n\nlibrary.add(fab)\n\nfunction UserForm(props) {\n  const defaultTweetN = 600\n\n  const [query, setQuery] = useState({\n    username: \"\"\n  })\n\n  const [tweetN, setTweetN] = useState(defaultTweetN)\n\n  const [isLargerThan600] = useMediaQuery('(min-width: 600px)') // mediaquery hook\n\n  var layout = \"column-reverse\"\n  if (isLargerThan600) {\n    layout = \"row\"\n  }\n\n  const handleChange = (event) => {\n    setQuery({\n      ...query,\n      username: event.target.value})\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    props.setStatus({\n      loading: true,\n      message: (\"Collecting tweets and generating model\"),\n      show: true,\n      error: false,\n    })\n    fetch(\n      `/markovify_user?username=${query.username}&tweetN=${tweetN}`,\n      {\n        method: 'GET', // *GET, POST, PUT, DELETE, etc.\n        mode: 'cors', // no-cors, *cors, same-origin\n      }\n    )\n    .then( (response) => {\n      return response.json()\n    })\n    .then( (response) => {\n      props.setStatus({\n        message: null,\n        loading: false,\n        show: false,\n        error: false,\n      })\n      props.setUserModel({\n        user: response.name,\n        userHandle: response.username,\n        userProfilePicture: response.userProfilePicture,\n        userMetrics: response.userMetrics,\n        userJoined: response.userJoined,\n        currentModel: response.model,\n        modelSize: response.modelSize,\n        modelDate: response.modelDate,\n        analytics: response.analytics,\n      })\n    })\n    .catch( (error) => {\n      console.log(error)\n      props.setStatus({\n        loading: false,\n        message: (`Error - user was not found. Remember to type in your user handle without the @ \\neg type BarackObama instead of @BarackObama`),\n        show: false,\n        error: true,\n      })\n    })\n  }\n\n  return (\n    <div>\n      <Flex flexDir={\"column\"}>\n        <FormControl isInvalid={props.status.error} mt={\"-20px\"} mb={\"-20px\"}>\n          <InputGroup margin={'30px auto'} maxW={'50ch'}>\n            <InputLeftElement\n              pointerEvents=\"none\"\n              children={\n                <AtSignIcon\n                  color=\"gray.800\"\n                  p={0}\n                  h={20}\n                />\n              }\n            />\n            <Input\n              type = \"text\"\n              id = \"search-input\"\n              variant=\"filled\"\n              name = \"username\"\n              placeholder = \"eg BarackObama, AlboMP\"\n              value = {query.username}\n              onChange = {handleChange}\n              pl={8}\n              fontSize={'1.2rem'}\n            />\n\n          </InputGroup>\n          <FormErrorMessage mt={-4} mb={4}>{props.status.message}</FormErrorMessage>\n        </FormControl>\n        {\n          props.status.show && <StatusBox status={props.status}/>\n        }\n        { !props.status.show &&\n          <Flex\n            w={\"100%\"}\n            justifyContent=\"space-around\"\n            alignItems=\"center\"\n            flexDir={layout}\n            mt={3}\n          >\n            <Box w={\"100%\"} maxW={\"400px\"} m={\"25px 30px 0px 10px\"}>\n              <TweetSlider tweetN={tweetN} setTweetN={setTweetN} primaryColor={props.primaryColor} />\n            </Box>\n            <Button\n              onClick={handleSubmit}\n              isLoading={props.status.loading}\n              colorScheme={'teal'}\n              isDisabled={tweetN === 0}\n              m={3}\n              maxW={\"300px\"}\n              w={\"100%\"}\n              ml={3}\n            >\n              <FontAwesomeIcon icon={['fab', 'twitter']} />\n              <Text as=\"span\" ml={2}>\n              {`Generate model`}\n              </Text>\n            </Button>\n          </Flex>\n        }\n      </Flex>\n    </div>\n  )\n}\n\nexport default UserForm;\n","import UserForm from \"../components/UserForm\";\nimport {\n  Box,\n  Card,\n  CardBody,\n  Flex,\n  Heading,\n  Image,\n  Link,\n  Stack,\n  StackDivider,\n  Text\n} from \"@chakra-ui/react\";\n\nfunction StartScreen(props) {\n  return (\n    <Card p={5} pb=\"40px\" mb={3}>\n      <CardBody>\n        <Stack divider={<StackDivider />} spacing='9'>\n          <Box>\n            <Flex direction='row' spacing='3' alignItems={\"center\"} justifyContent={\"center\"} maxW={\"50ch\"} margin={\"0 auto\"}>\n              <Image src={ require('../images/icons/arrow-down.png') } alt=\"arrow-down\" h={\"20px\"} m=\"20px 15px 0px 15px\" />\n              <Text pt='2' fontSize='md'>\n                Choose a twitter user to train the model on.\n              </Text>\n            </Flex>\n            <UserForm\n              userModel = {props.userModel}\n              setUserModel={props.setUserModel}\n              resetTweets={props.resetTweets}\n              status={props.status}\n              setStatus={props.setStatus}\n              generateTweets={props.generateTweets}\n              primaryColor={props.primaryColor}\n            />\n            <Flex direction='row' spacing='3' justifyContent={\"center\"} maxW={\"50ch\"} margin={\"20px auto\"}>\n              <Image src={ require('../images/icons/arrow-up.png') } alt=\"arrow-down\" h={\"20px\"} m=\"0px 15px 0px 15px\" />\n              <Text pt='2' fontSize='md'>\n                You can adjust the number of tweets used to train the model - the more\n                tweets, the more accurate the model, but the longer it will take to generate.\n              </Text>\n            </Flex>\n          </Box>\n          <Box m={\"0 auto\"}><props.ImportJsonButton /></Box>\n        </Stack>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default StartScreen;\n","import FadeIn from 'react-fade-in';\nimport { Button, Card, Heading, Flex, Spacer } from \"@chakra-ui/react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\n\nlibrary.add(fab)\n\nfunction TweetDisplayArea(props) {\n  return (\n    <div>\n      { props.tweets.length > 0 &&\n      <Card m={\"20px auto\"} p={3} maxW={\"500px\"} justifyContent=\"center\">\n        <Heading size=\"md\" textAlign={\"center\"}>\n          Generated Tweets\n        </Heading>\n        <Button onClick={props.generateTweets} colorScheme=\"teal\" m={2} alignSelf=\"center\">\n          <FontAwesomeIcon icon={['fab', 'twitter']} /><Spacer mr=\"1\" />Generate More Tweets\n        </Button>\n        <FadeIn className=\"tweet-display-area\">\n          <Flex flexDir=\"column\" alignItems={\"center\"}>\n            {props.tweets.map( (tweet, index) => {\n              return <TweetBox userModel={props.userModel} tweet={tweet} key={index}/>\n            })}\n          </Flex>\n        </FadeIn>\n      </Card>\n    }\n    </div>\n  )\n}\n\nfunction TweetBox(props) {\n  return (\n    <div className=\"twitter-tweet\">\n      <div className=\"tweet-header\">\n        <img src={props.userModel.userProfilePicture} alt = \"\" ></img>\n        <div className=\"tweeter-name-box\">\n          <div>{props.userModel.user}</div>\n          <div className=\"tweeter-username\">{props.userModel.userHandle && `@${props.userModel.userHandle}`}</div>\n        </div>\n      </div>\n      <p>\n        {props.tweet}\n      </p>\n    </div>\n  )\n}\n\nexport default TweetDisplayArea;\n","import React, { useState } from \"react\";\nimport { Button, ChakraProvider, Container, FormLabel, Input, } from '@chakra-ui/react'\n\nimport ModelDisplayArea from '../sections/ModelDisplayArea';\nimport StartScreen from '../sections/StartScreen';\nimport TweetDisplayArea from '../sections/TweetDisplayArea';\n\nfunction MarkovApp(){\n\n  const primaryColor = \"#1DA1F2\"\n  const [status, setStatus] = useState({\n    message: null,\n    loading: false,\n    show: false,\n    error: false,\n  })\n\n  const [tweets, setTweets] = useState([])\n\n  // const [currentScreen, setCurrentScreen] = useState(\"start\")\n\n  const [userModel, setUserModel] = useState({\n    analytics: null,\n    user: null,\n    userHandle: null,\n    userProfilePicture: null,\n    userMetrics: null,\n    userJoined: null,\n    currentModel: null, // unsure - storing the markov model in the state is probably a bit much - would be better in the session storage\n    modelSize: null,\n    modelDate: null,\n  })\n\n  const reset = () => {\n    setUserModel({\n      analytics: null,\n      user: null,\n      userHandle: null,\n      userProfilePicture: null,\n      userMetrics: null,\n      userJoined: null,\n      currentModel: null,\n      modelSize: null,\n      modelDate: null,\n    })\n    setTweets([])\n    setStatus({\n      message: null,\n      loading: false,\n      show: false,\n      error: false,\n    })\n  }\n\n\n  const [tweetKey, setTweetKey] = useState(0)\n\n  React.useEffect(() => { // generates tweets when the model is loaded or changed\n    if (userModel.currentModel) { // this is because the new functional setstate doesn't update the state immediately\n      generateTweets() // and doesn't allow for callbacks immediately after the state is set\n    }                   // there's probably a better way to do this\n  }, [userModel.currentModel])\n\n  React.useEffect(() => { // sets a key to the tweets to force remounting of the tweet display area\n    setTweetKey(tweetKey + 1) // this is a bit of a hacky way to force the tweet display area to remount and trigger the fadein animation\n  }, [tweets])\n\n  const generateTweets = (event) => {\n    setStatus({\n      loading: true,\n      message: \"Generating tweets...\",\n      show: true,\n      error: false\n    })\n    fetch(\"/generate_tweets\", {\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.,\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n          model: userModel.currentModel\n        })\n      // body: JSON.stringify([\"test\"])\n    })\n    .then(response => {\n      return response.json()\n    })\n    .then( (response) => {\n      setStatus({\n        message: null,\n        loading: false,\n        show: false,\n        error: false,\n      })\n      setTweets(response.tweets)\n    })\n    .catch( (error) => {\n      setTweets([])\n      setStatus({\n        message: \"Error generating tweets\",\n        loading: false,\n        show: false,\n        error: true\n      })\n    })\n  }\n\n  const resetTweets = () => setTweets([])\n\n  const downloadFile = ({ data, fileName, fileType }) => {\n    // Create a blob with the data we want to download as a file\n    const blob = new Blob([data], { type: fileType })\n    // Create an anchor element and dispatch a click event on it\n    // to trigger a download\n    const a = document.createElement('a')\n    a.download = fileName\n    a.href = window.URL.createObjectURL(blob)\n    const clickEvt = new MouseEvent('click', {\n      view: window,\n      bubbles: true,\n      cancelable: true,\n    })\n    a.dispatchEvent(clickEvt)\n    a.remove()\n  }\n\n  const exportToJson = e => {\n    e.preventDefault()\n    downloadFile({\n      data: JSON.stringify(userModel),\n      fileName: `${userModel.userHandle}_model.json`,\n      fileType: 'text/json',\n    })\n  }\n\n  const importJson = e => {\n    e.preventDefault()\n    const file = e.target.files[0]\n    const reader = new FileReader()\n    reader.onload = e => {\n      const json = JSON.parse(e.target.result)\n      setUserModel(json)\n    }\n    reader.readAsText(file)\n  }\n\n  const ImportJsonButton = () => {\n    return (\n      <div>\n        <Button colorScheme={\"teal\"}>\n        <FormLabel\n          htmlFor=\"import-json\"\n          className=\"import-button\"\n          h=\"100%\"\n          w=\"100%\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          m=\"0\"\n          _hover={{ cursor: \"pointer\" }}\n        >\n            Upload a previous model (.json)\n          <Input\n          colorScheme={\"teal\"}\n          type=\"file\"\n          id=\"import-json\"\n          accept=\".json\"\n          onChange={importJson}\n          h=\"100%\"\n          w=\"100%\"\n          display=\"none\"\n        />\n        </FormLabel>\n        </Button>\n\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      { !userModel.user && // show the start screen if there is no user\n        <StartScreen\n          userModel = {userModel}\n          setUserModel={setUserModel}\n          resetTweets={resetTweets}\n          generateTweets={generateTweets}\n          status={status}\n          setStatus={setStatus}\n          primaryColor={primaryColor}\n          ImportJsonButton={ImportJsonButton}\n        />\n      }\n      { userModel.user &&\n        <ModelDisplayArea\n          userModel={userModel}\n          setTweets={setTweets}\n          generateTweets={generateTweets}\n          reset={reset}\n          status={status}\n          exportToJson={exportToJson}\n        />\n      }\n      <TweetDisplayArea key={tweetKey} tweets={tweets} userModel={userModel} generateTweets={generateTweets}/>\n    </div>\n  );\n}\n\nexport default MarkovApp;\n"],"names":["props","className","status","loading","variant","alignItems","textAlign","justifyContent","flexWrap","p","as","thickness","speed","emptyColor","color","size","m","flexShrink","flexGrow","message","wordCloud","minSize","maxSize","tags","colorOptions","luminosity","hue","shuffle","data","h","w","pb","ResponsiveContainer","width","height","AreaChart","console","log","processedData","Object","entries","key","value","push","sentiment","count","processDataForGraph","margin","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","Area","type","dataKey","stroke","fill","library","fab","twitterNumber","number","toFixed","overflow","mb","objectFit","borderRadius","src","userModel","userProfilePicture","maxW","pl","user","userHandle","fontSize","userJoined","colorScheme","userMetrics","tweet_count","following_count","followers_count","end","modelSize","tweets","duration","words","modelDate","flexDir","onClick","reset","minW","mr","exportToJson","WordCloud","analytics","aggregateSentiment","labelStyles","mt","ml","pt","defaultValue","tweetN","min","max","onChange","val","setTweetN","step","bg","whiteSpace","useState","username","query","setQuery","useMediaQuery","layout","isInvalid","error","pointerEvents","children","I","name","placeholder","event","target","show","primaryColor","preventDefault","setStatus","fetch","method","mode","then","response","json","setUserModel","currentModel","model","catch","isLoading","isDisabled","icon","divider","spacing","direction","require","alt","resetTweets","generateTweets","ImportJsonButton","TweetBox","tweet","length","alignSelf","map","index","setTweets","tweetKey","setTweetKey","React","headers","body","JSON","stringify","importJson","e","file","files","reader","FileReader","onload","parse","result","readAsText","htmlFor","display","_hover","cursor","accept","fileName","fileType","blob","Blob","a","document","createElement","download","href","window","URL","createObjectURL","clickEvt","MouseEvent","view","bubbles","cancelable","dispatchEvent","remove","downloadFile"],"sourceRoot":""}