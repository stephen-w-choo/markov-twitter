{"version":3,"file":"static/js/239.dac80bf5.chunk.js","mappings":"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","sources":["components/TweetSlider.jsx","components/UserForm.jsx","sections/StartScreen.jsx","routes/MarkovApp.jsx","sections/InactivePopUp.jsx","sections/WordCloud.jsx","sections/SentimentGraph.jsx","sections/ModelDisplayArea.jsx","sections/StatusBox.jsx","sections/TweetDisplayArea.jsx"],"sourcesContent":["import React from 'react'\nimport {\n  Box,\n  Slider,\n  SliderTrack,\n  SliderFilledTrack,\n  SliderThumb,\n  SliderMark,\n} from '@chakra-ui/react'\n\n\nfunction TweetSlider(props) {\n  const labelStyles = {\n    mt: '2',\n    ml: '-2.5',\n    fontSize: 'sm',\n  }\n\n  return (\n    <Box pt={6} pb={2}>\n      <Slider\n        aria-label='slider-ex-6'\n        defaultValue={props.tweetN}\n        min={0}\n        max={1600}\n        onChange={(val) => {\n          props.setTweetN(val)\n        }}\n        step={100}\n        colorScheme=\"teal\"\n      >\n\n        <SliderMark value={400} {...labelStyles}>\n          400\n        </SliderMark>\n        <SliderMark value={800} {...labelStyles}>\n          800\n        </SliderMark>\n        <SliderMark value={1200} {...labelStyles}>\n          1200\n        </SliderMark>\n        <SliderMark\n          value={props.tweetN}\n          textAlign='center'\n          bg=\"teal\"\n          color='white'\n          mt='-12'\n          ml='-60px'\n          whiteSpace={'nowrap'}\n          borderRadius='md'\n          p={1}\n        >\n          {props.tweetN} tweets\n        </SliderMark>\n        <SliderTrack>\n          <SliderFilledTrack />\n        </SliderTrack>\n        <SliderThumb />\n      </Slider>\n    </Box>\n  )\n}\n\nexport default TweetSlider\n","import React, { useState } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  Text,\n  useMediaQuery } from \"@chakra-ui/react\";\nimport { AtSignIcon } from '@chakra-ui/icons'\nimport StatusBox from \"../sections/StatusBox\";\nimport TweetSlider from \"./TweetSlider\"\n\nlibrary.add(fab)\n\nfunction UserForm(props) {\n  const defaultTweetN = 600\n\n  const [query, setQuery] = useState({\n    username: \"\"\n  })\n\n  const [tweetN, setTweetN] = useState(defaultTweetN)\n\n  const [isLargerThan600] = useMediaQuery('(min-width: 600px)') // mediaquery hook\n\n  var layout = \"column-reverse\"\n  if (isLargerThan600) {\n    layout = \"row\"\n  }\n\n  const handleChange = (event) => {\n    setQuery({\n      ...query,\n      username: event.target.value})\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    props.setStatus({\n      loading: true,\n      message: (\"Collecting tweets and generating model\"),\n      show: true,\n      error: false,\n    })\n    fetch(\n      `/markovify_user?username=${query.username}&tweetN=${tweetN}`,\n      {\n        method: 'GET', // *GET, POST, PUT, DELETE, etc.\n        mode: 'cors', // no-cors, *cors, same-origin\n      }\n    )\n    .then( (response) => {\n      return response.json()\n    })\n    .then( (response) => {\n      props.setStatus({\n        message: null,\n        loading: false,\n        show: false,\n        error: false,\n      })\n      props.setUserModel({\n        user: response.name,\n        userHandle: response.username,\n        userProfilePicture: response.userProfilePicture,\n        userMetrics: response.userMetrics,\n        userJoined: response.userJoined,\n        currentModel: response.model,\n        modelSize: response.modelSize,\n        modelDate: response.modelDate,\n        analytics: response.analytics,\n      })\n    })\n    .catch( (error) => {\n      console.log(error)\n      props.setStatus({\n        loading: false,\n        message: (`Error - user was not found. Remember to type in your user handle without the @ \\neg type BarackObama instead of @BarackObama`),\n        show: false,\n        error: true,\n      })\n    })\n  }\n\n  return (\n    <div>\n      <Flex flexDir={\"column\"}>\n        <FormControl isInvalid={props.status.error} mt={\"-20px\"} mb={\"-20px\"}>\n          <InputGroup margin={'30px auto'} maxW={'50ch'}>\n            <InputLeftElement\n              pointerEvents=\"none\"\n              children={\n                <AtSignIcon\n                  color=\"gray.800\"\n                  p={0}\n                  h={20}\n                />\n              }\n            />\n            <Input\n              type = \"text\"\n              id = \"search-input\"\n              variant=\"filled\"\n              name = \"username\"\n              placeholder = \"eg BarackObama, AlboMP\"\n              value = {query.username}\n              onChange = {handleChange}\n              pl={8}\n              fontSize={'1.2rem'}\n            />\n\n          </InputGroup>\n          <FormErrorMessage mt={-4} mb={4}>{props.status.message}</FormErrorMessage>\n        </FormControl>\n        {\n          props.status.show && <StatusBox status={props.status}/>\n        }\n        { !props.status.show &&\n          <Flex\n            w={\"100%\"}\n            justifyContent=\"space-around\"\n            alignItems=\"center\"\n            flexDir={layout}\n            mt={3}\n          >\n            <Box w={\"100%\"} maxW={\"400px\"} m={\"25px 30px 0px 10px\"}>\n              <TweetSlider tweetN={tweetN} setTweetN={setTweetN} primaryColor={props.primaryColor} />\n            </Box>\n            <Button\n              onClick={handleSubmit}\n              isLoading={props.status.loading}\n              colorScheme={'teal'}\n              isDisabled={tweetN === 0}\n              m={3}\n              maxW={\"300px\"}\n              w={\"100%\"}\n              ml={3}\n            >\n              <FontAwesomeIcon icon={['fab', 'twitter']} />\n              <Text as=\"span\" ml={2}>\n              {`Generate model`}\n              </Text>\n            </Button>\n          </Flex>\n        }\n      </Flex>\n    </div>\n  )\n}\n\nexport default UserForm;\n","import UserForm from \"../components/UserForm\";\nimport {\n  Box,\n  Card,\n  CardBody,\n  Flex,\n  Image,\n  Stack,\n  StackDivider,\n  Text\n} from \"@chakra-ui/react\";\n\nfunction StartScreen(props) {\n  return (\n    <Card p={5} pb=\"40px\" mb={3}>\n      <CardBody>\n        <Stack divider={<StackDivider />} spacing='9'>\n          <Box>\n            <Flex direction='row' spacing='3' alignItems={\"center\"} justifyContent={\"center\"} maxW={\"50ch\"} margin={\"0 auto\"}>\n              <Image src={ require('../images/icons/arrow-down.png') } alt=\"arrow-down\" h={\"20px\"} m=\"20px 15px 0px 15px\" />\n              <Text pt='2' fontSize='md'>\n                Choose a twitter user to train the model on.\n              </Text>\n            </Flex>\n            <UserForm\n              userModel = {props.userModel}\n              setUserModel={props.setUserModel}\n              resetTweets={props.resetTweets}\n              status={props.status}\n              setStatus={props.setStatus}\n              generateTweets={props.generateTweets}\n              primaryColor={props.primaryColor}\n            />\n            <Flex direction='row' spacing='3' justifyContent={\"center\"} maxW={\"50ch\"} margin={\"20px auto\"}>\n              <Image src={ require('../images/icons/arrow-up.png') } alt=\"arrow-down\" h={\"20px\"} m=\"0px 15px 0px 15px\" />\n              <Text pt='2' fontSize='md'>\n                You can adjust the number of tweets used to train the model - the more\n                tweets, the more accurate the model, but the longer it will take to generate.\n              </Text>\n            </Flex>\n          </Box>\n          <Box m={\"0 auto\"}><props.ImportJsonButton /></Box>\n        </Stack>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default StartScreen;\n","import React, { useState } from \"react\";\nimport { Button, FormLabel, Input, } from '@chakra-ui/react'\nimport ModelDisplayArea from '../sections/ModelDisplayArea';\nimport StartScreen from '../sections/StartScreen';\nimport TweetDisplayArea from '../sections/TweetDisplayArea';\nimport InactivePopUp from '../sections/InactivePopUp';\n\n\n// this entire page is a mess and I apologise - trying to learn Redux to implement a proper state management system\n\n// WILL be refactored once I'm more comfortable with Redux\n\nfunction MarkovApp(){\n  const primaryColor = \"#1DA1F2\"\n  const [status, setStatus] = useState({\n    message: null,\n    loading: false,\n    show: false,\n    error: false,\n  })\n\n  const [tweets, setTweets] = useState([])\n\n  // const [currentScreen, setCurrentScreen] = useState(\"start\")\n\n  const [userModel, setUserModel] = useState({\n    analytics: null,\n    user: null,\n    userHandle: null,\n    userProfilePicture: null,\n    userMetrics: null,\n    userJoined: null,\n    currentModel: null, // unsure - storing the markov model in the state is probably a bit much - would be better in the session storage\n    modelSize: null,\n    modelDate: null,\n  })\n\n  const reset = () => {\n    setUserModel({\n      analytics: null,\n      user: null,\n      userHandle: null,\n      userProfilePicture: null,\n      userMetrics: null,\n      userJoined: null,\n      currentModel: null,\n      modelSize: null,\n      modelDate: null,\n    })\n    setTweets([])\n    setStatus({\n      message: null,\n      loading: false,\n      show: false,\n      error: false,\n    })\n  }\n\n\n  const [tweetKey, setTweetKey] = useState(0)\n\n  React.useEffect(() => { // generates tweets when the model is loaded or changed\n    if (userModel.currentModel) { // this is because the new functional setstate doesn't update the state immediately\n      generateTweets() // and doesn't allow for callbacks immediately after the state is set\n    }                   // there's probably a better way to do this\n  }, [userModel.currentModel])\n\n  React.useEffect(() => { // sets a key to the tweets to force remounting of the tweet display area\n    setTweetKey(tweetKey + 1) // this is a bit of a hacky way to force the tweet display area to remount and trigger the fadein animation\n  }, [tweets])\n\n  const generateTweets = (event) => {\n    setStatus({\n      loading: true,\n      message: \"Generating tweets...\",\n      show: true,\n      error: false\n    })\n    fetch(\"/generate_tweets\", {\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.,\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n          model: userModel.currentModel\n        })\n      // body: JSON.stringify([\"test\"])\n    })\n    .then(response => {\n      return response.json()\n    })\n    .then( (response) => {\n      setStatus({\n        message: null,\n        loading: false,\n        show: false,\n        error: false,\n      })\n      setTweets(response.tweets)\n    })\n    .catch( (error) => {\n      setTweets([])\n      setStatus({\n        message: \"Error generating tweets\",\n        loading: false,\n        show: false,\n        error: true\n      })\n    })\n  }\n\n  const resetTweets = () => setTweets([])\n\n  const downloadFile = ({ data, fileName, fileType }) => {\n    // Create a blob with the data we want to download as a file\n    const blob = new Blob([data], { type: fileType })\n    // Create an anchor element and dispatch a click event on it\n    // to trigger a download\n    const a = document.createElement('a')\n    a.download = fileName\n    a.href = window.URL.createObjectURL(blob)\n    const clickEvt = new MouseEvent('click', {\n      view: window,\n      bubbles: true,\n      cancelable: true,\n    })\n    a.dispatchEvent(clickEvt)\n    a.remove()\n  }\n\n  const exportToJson = e => {\n    e.preventDefault()\n    downloadFile({\n      data: JSON.stringify(userModel),\n      fileName: `${userModel.userHandle}_model.json`,\n      fileType: 'text/json',\n    })\n  }\n\n  const importJson = e => {\n    e.preventDefault()\n    const file = e.target.files[0]\n    const reader = new FileReader()\n    reader.onload = e => {\n      const json = JSON.parse(e.target.result)\n      setUserModel(json)\n    }\n    reader.readAsText(file)\n  }\n\n  const ImportJsonButton = () => {\n    return (\n      <div>\n        <Button colorScheme={\"teal\"}>\n        <FormLabel\n          htmlFor=\"import-json\"\n          className=\"import-button\"\n          h=\"100%\"\n          w=\"100%\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          m=\"0\"\n          _hover={{ cursor: \"pointer\" }}\n        >\n            Upload a previous model (.json)\n          <Input\n          colorScheme={\"teal\"}\n          type=\"file\"\n          id=\"import-json\"\n          accept=\".json\"\n          onChange={importJson}\n          h=\"100%\"\n          w=\"100%\"\n          display=\"none\"\n        />\n        </FormLabel>\n        </Button>\n\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <InactivePopUp />\n      { !userModel.user && // show the start screen if there is no user\n        <StartScreen\n          userModel = {userModel}\n          setUserModel={setUserModel}\n          resetTweets={resetTweets}\n          generateTweets={generateTweets}\n          status={status}\n          setStatus={setStatus}\n          primaryColor={primaryColor}\n          ImportJsonButton={ImportJsonButton}\n        />\n      }\n      { userModel.user &&\n        <ModelDisplayArea\n          userModel={userModel}\n          setTweets={setTweets}\n          generateTweets={generateTweets}\n          reset={reset}\n          status={status}\n          exportToJson={exportToJson}\n        />\n      }\n      <TweetDisplayArea key={tweetKey} tweets={tweets} userModel={userModel} generateTweets={generateTweets}/>\n    </div>\n  );\n}\n\nexport default MarkovApp;\n","import {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogContent,\n  AlertDialogOverlay,\n  Button,\n  useDisclosure,\n} from '@chakra-ui/react'\nimport React from 'react'\n\n\nfunction InactivePopUp() {\n  const { isOpen, onOpen, onClose } = useDisclosure({defaultIsOpen: true})\n  const cancelRef = React.useRef()\n\n  return (\n    <React.Fragment>\n      <AlertDialog\n        isOpen={isOpen}\n        leastDestructiveRef={cancelRef}\n        onClose={onClose}\n      >\n        <AlertDialogOverlay>\n          <AlertDialogContent>\n            <AlertDialogHeader fontSize='lg' fontWeight='bold'>\n              A note from the developer\n            </AlertDialogHeader>\n\n            <AlertDialogBody>\n            As of May 2023, Twitter has changed it's API, and this small hobby project is now prohibitively expensive to run. I've removed my API key and the app backend will no longer work.\n            <br /> <br />\n            I've left the web frontend running for now: this was one of my first passion projects that I had a lot of fun with, and I'm still proud of what I managed to do with my skills at the time.\n            </AlertDialogBody>\n\n            <AlertDialogFooter>\n              <Button ref={cancelRef} onClick={onClose}>\n                Continue\n              </Button>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialogOverlay>\n      </AlertDialog>\n    </React.Fragment>\n  )\n}\n\nexport default InactivePopUp","import React from 'react'\nimport { TagCloud } from 'react-tagcloud'\n\n\nfunction WordCloudBox({wordCloud}) {\n  const options = {\n    luminosity: 'dark',\n    hue: 'green'\n  }\n\n  return (\n    <TagCloud\n      minSize={12}\n      maxSize={35}\n      tags={wordCloud}\n      colorOptions={options}\n      shuffle={false}\n    />\n  )\n}\n\nexport default WordCloudBox;\n","import {\n  AreaChart,\n  Area,\n  ResponsiveContainer\n} from 'recharts';\n\nimport {\n  Box,\n  Flex,\n  Heading,\n} from '@chakra-ui/react'\n\nfunction SentimentGraph({data}) {\n  const processDataForGraph = (data) => {\n    console.log(data)\n    const processedData = []\n    for (const [key, value] of Object.entries(data)) {\n      processedData.push({\n        sentiment: key,\n        count: value\n      })\n    }\n    //\n    return processedData\n  }\n\n  return(\n    <Box h=\"100%\" w=\"280px\" pb=\"50px\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <AreaChart\n          width={200}\n          height={60}\n          data={processDataForGraph(data)}\n          margin={{\n            top: 5,\n            right: 0,\n            left: 0,\n            bottom: 5,\n          }}\n        >\n          <defs>\n            <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\n              <stop offset=\"5%\" stopColor=\"red\"/>\n              <stop offset=\"95%\" stopColor=\"green\"/>\n            </linearGradient>\n          </defs>\n          <Area type=\"monotone\" dataKey=\"count\" stroke=\"#8884d8\" fill=\"url(#colorPv)\" />\n        </AreaChart>\n\n      </ResponsiveContainer>\n      <Flex justifyContent=\"space-between\">\n        <Heading size=\"xs\">Negative</Heading>\n        <Heading size=\"xs\">Positive</Heading>\n      </Flex>\n    </Box>\n  )\n}\n\nexport default SentimentGraph\n","import React from \"react\";\nimport CountUp from 'react-countup';\nimport {\n  Box,\n  Button,\n  Card,\n  CardHeader,\n  Divider,\n  Flex,\n  Heading,\n  Image,\n  StatGroup,\n  Stat,\n  StatLabel,\n  StatNumber,\n  StatHelpText,\n  Text,\n } from \"@chakra-ui/react\";\nimport { ArrowBackIcon, DownloadIcon } from '@chakra-ui/icons'\nimport StatusBox from \"./StatusBox\";\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport WordCloudBox from \"./WordCloud\";\nimport SentimentGraph from \"./SentimentGraph\";\n\nlibrary.add(fab)\n\nfunction ModelDisplayArea(props) {\n  // takes a response from the markovify_user api and displays the user details and background of the tweets\n  // has a button to generate tweets from the model\n\n  const twitterNumber = (number) => {\n    // takes a number and returns a string in the format \"X.XXm\" or \"X.XXk\"\n    // depending on the size of the number\n    if (number >= 1000000) {\n      return `${(number/1000000).toFixed(2)}m`\n    } else if (number >= 1000) {\n      return `${(number/1000).toFixed(2)}k`\n    } else {\n      return number\n    }\n  }\n\n  return (\n    <div className=\"model-display-area\">\n\n      <Card\n        overflow='hidden'\n        variant='outline'\n        p='3'\n        mb='3'\n      >\n        <Flex justifyContent={\"center\"} alignItems={\"center\"}>\n          <Image\n            objectFit='cover'\n            borderRadius={'md'}\n            h='120px'\n            w='120px'\n            src={props.userModel.userProfilePicture}\n          />\n          <Box w={\"100%\"} maxW=\"40ch\" pl=\"3\">\n            <Heading size='sm' m=\"5px 15px\">{props.userModel.user}</Heading>\n            <Heading size='sm' m=\"5px 15px\"color='blackAlpha.600'>\n              {`@${props.userModel.userHandle}`}\n            </Heading>\n            <Text fontSize='sm' m=\"5px 15px\">Joined {props.userModel.userJoined}</Text>\n            <StatGroup justifyContent={\"space-between\"} maxW={\"30ch\"} textAlign={\"center\"} flexWrap={\"wrap\"}>\n              <Stat colorScheme={\"twitter\"} m={1}>\n                <StatNumber fontSize=\"sm\">\n                  {twitterNumber(props.userModel.userMetrics.tweet_count)}\n                </StatNumber>\n                <StatHelpText>\n                  tweets\n                </StatHelpText>\n              </Stat>\n              <Stat colorScheme={\"twitter\"} m={1}>\n                <StatNumber fontSize=\"sm\">\n                  {twitterNumber(props.userModel.userMetrics.following_count)}\n                </StatNumber>\n                <StatHelpText>\n                  following\n                </StatHelpText>\n              </Stat>\n              <Stat colorScheme={\"twitter\"} m={1}>\n                <StatNumber fontSize=\"sm\">\n                  {twitterNumber(props.userModel.userMetrics.followers_count)}\n                </StatNumber>\n                <StatHelpText>\n                  followers\n                </StatHelpText>\n              </Stat>\n            </StatGroup>\n          </Box>\n        </Flex>\n        <Divider h={3} />\n        <CardHeader>\n          <Heading size='md' textAlign={\"center\"}>Model Details</Heading>\n        </CardHeader>\n        <StatGroup textAlign={\"center\"}>\n          <Stat>\n            <StatLabel>Trained on</StatLabel>\n            <StatNumber><CountUp end={props.userModel.modelSize.tweets} duration={1.5}/></StatNumber>\n            <StatHelpText>\n              tweets\n            </StatHelpText>\n          </Stat>\n          <Stat>\n            <StatLabel>with</StatLabel>\n            <StatNumber><CountUp end={props.userModel.modelSize.words} duration={2}/></StatNumber>\n            <StatHelpText>\n              words\n            </StatHelpText>\n          </Stat>\n          <Stat>\n            <StatLabel>\n              Tweet Dates\n            </StatLabel>\n            <StatNumber fontSize=\"sm\">\n              {props.userModel.modelDate[0]}\n            </StatNumber>\n            <StatHelpText mb={\"0\"}>\n              to\n            </StatHelpText>\n            <StatNumber fontSize=\"sm\">\n              {props.userModel.modelDate[1]}\n            </StatNumber>\n          </Stat>\n        </StatGroup>\n\n        <Card flexDir={\"row\"} justifyContent={\"space-around\"} flexWrap={\"wrap\"} variant=\"outline\">\n          <Button onClick={props.reset} colorScheme=\"teal\" m={2} minW=\"100px\">\n            <ArrowBackIcon mr=\"5px\"/> Back\n          </Button>\n          <Button onClick={props.exportToJson} colorScheme=\"teal\" m={2}>\n            <DownloadIcon mr=\"10px\"/> Save Model\n          </Button>\n        </Card>\n        <CardHeader>\n          <Heading size='md' textAlign={\"center\"}>Analytics</Heading>\n        </CardHeader>\n        <Flex justifyContent={\"space-around\"} flexWrap={\"wrap\"}>\n          <Card maxW=\"40ch\" m={2} p={3} alignItems={\"center\"} variant=\"filled\">\n            <CardHeader p={0} mb={3}>\n              <Heading size='md'> Commonly used words </Heading>\n            </CardHeader>\n            <WordCloudBox wordCloud={props.userModel.analytics.wordCloud}/>\n          </Card>\n          <Card maxW=\"40ch\" m={2} p={3} h=\"300px\" alignItems={\"center\"} variant=\"filled\" flexGrow={1}>\n            <CardHeader p={0}>\n              <Heading size='md'> Sentiment Analysis </Heading>\n            </CardHeader>\n            <SentimentGraph data={props.userModel.analytics.aggregateSentiment}/>\n          </Card>\n        </Flex>\n        <Divider h={3} />\n        </Card>\n      {\n        props.status && <StatusBox status={props.status}/>\n      }\n    </div>\n  )\n}\n\nexport default ModelDisplayArea;\n","import React from \"react\";\nimport FadeIn from 'react-fade-in';\nimport { Alert, AlertIcon } from \"@chakra-ui/react\";\nimport LoadingBar from \"../components/LoadingBar\";\n\nfunction StatusBox(props) {\n  return(\n    <div className=\"loading-box\">\n      <FadeIn>\n        {props.status.loading &&\n          <LoadingBar>{props.status.message}</LoadingBar>\n        }\n        {!props.status.loading && props.status.message &&\n          <Alert\n          status='warning'\n          variant='subtle'\n          alignItems='center'\n          textAlign={'left'}\n          >\n            <AlertIcon />\n            {props.status.message}\n          </Alert>\n        }\n\n      </FadeIn>\n    </div>\n  )\n}\n\nexport default StatusBox;\n","import FadeIn from 'react-fade-in';\nimport { Button, Card, Heading, Flex, Spacer } from \"@chakra-ui/react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\n\nlibrary.add(fab)\n\nfunction TweetDisplayArea(props) {\n  console.log(\"tweets loaded\")\n  return (\n    <div>\n      { props.tweets.length > 0 &&\n      <Card m={\"20px auto\"} p={3} maxW={\"500px\"} justifyContent=\"center\">\n        <Heading size=\"md\" textAlign={\"center\"}>\n          Generated Tweets\n        </Heading>\n        <Button onClick={props.generateTweets} colorScheme=\"teal\" m={2} alignSelf=\"center\">\n          <FontAwesomeIcon icon={['fab', 'twitter']} /><Spacer mr=\"1\" />Generate More Tweets\n        </Button>\n        <FadeIn className=\"tweet-display-area\">\n          <Flex flexDir=\"column\" alignItems={\"center\"}>\n            {props.tweets.map( (tweet, index) => {\n              return <TweetBox userModel={props.userModel} tweet={tweet} key={index}/>\n            })}\n          </Flex>\n        </FadeIn>\n      </Card>\n    }\n    </div>\n  )\n}\n\nfunction TweetBox(props) {\n  return (\n    <div className=\"twitter-tweet\">\n      <div className=\"tweet-header\">\n        <img src={props.userModel.userProfilePicture} alt = \"\" ></img>\n        <div className=\"tweeter-name-box\">\n          <div>{props.userModel.user}</div>\n          <div className=\"tweeter-username\">{props.userModel.userHandle && `@${props.userModel.userHandle}`}</div>\n        </div>\n      </div>\n      <p>\n        {props.tweet}\n      </p>\n    </div>\n  )\n}\n\nexport default TweetDisplayArea;\n"],"names":["props","labelStyles","mt","ml","fontSize","pt","pb","defaultValue","tweetN","min","max","onChange","val","setTweetN","step","colorScheme","value","textAlign","bg","color","whiteSpace","borderRadius","p","library","fab","useState","username","query","setQuery","useMediaQuery","layout","flexDir","isInvalid","status","error","mb","margin","maxW","pointerEvents","children","h","I","type","id","variant","name","placeholder","event","target","pl","message","show","StatusBox","w","justifyContent","alignItems","m","primaryColor","onClick","preventDefault","setStatus","loading","fetch","method","mode","then","response","json","setUserModel","user","userHandle","userProfilePicture","userMetrics","userJoined","currentModel","model","modelSize","modelDate","analytics","catch","console","log","isLoading","isDisabled","icon","as","divider","spacing","direction","src","require","alt","userModel","resetTweets","generateTweets","ImportJsonButton","tweets","setTweets","tweetKey","setTweetKey","React","headers","body","JSON","stringify","importJson","e","file","files","reader","FileReader","onload","parse","result","readAsText","InactivePopUp","htmlFor","className","display","_hover","cursor","accept","ModelDisplayArea","reset","exportToJson","data","fileName","fileType","blob","Blob","a","document","createElement","download","href","window","URL","createObjectURL","clickEvt","MouseEvent","view","bubbles","cancelable","dispatchEvent","remove","downloadFile","TweetDisplayArea","useDisclosure","defaultIsOpen","isOpen","onClose","onOpen","cancelRef","leastDestructiveRef","fontWeight","ref","wordCloud","minSize","maxSize","tags","colorOptions","luminosity","hue","shuffle","ResponsiveContainer","width","height","AreaChart","processedData","Object","entries","key","push","sentiment","count","processDataForGraph","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","Area","dataKey","stroke","fill","size","twitterNumber","number","toFixed","overflow","objectFit","flexWrap","tweet_count","following_count","followers_count","end","duration","words","minW","mr","WordCloud","flexGrow","aggregateSentiment","TweetBox","tweet","length","alignSelf","map","index"],"sourceRoot":""}